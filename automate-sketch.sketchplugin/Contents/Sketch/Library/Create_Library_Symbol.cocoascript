@import "../Libraries/Preferences.cocoascript";
@import "../Libraries/Google_Analytics.cocoascript";

var onRun = function(context) {

    var document = context.document;
    var selection = context.selection;

    if (MSApplicationMetadata.metadata().appVersion < 47) {
        document.showMessage("ðŸ˜® You have to update Sketch 47+ to use thie feature.");
        return;
    }

    if (selection.count() == 0) {
        document.showMessage("Please select at least one layer.");
        return;
    }

    var assetLibraryController = AppController.sharedInstance().librariesController();
    var userLibraries = assetLibraryController.userLibraries();
    var predicate = NSPredicate.predicateWithFormat("enabled == YES");
    var userLibraries = userLibraries.filteredArrayUsingPredicate(predicate);

    if (userLibraries.count() == 0) {
        document.showMessage("You have not any available user library.");
        return;
    }

    // Dialog
    var dialog = COSAlertWindow.alloc().init();
    dialog.setMessageText("Create Library Symbol");
    dialog.setInformativeText("Create a imported symbol from selected layers, and send the symbol master to a library.");

    // Symbol name
    var symbolNameView = NSTextField.alloc().initWithFrame(NSMakeRect(0, 0, 300, 24));
    symbolNameView.setStringValue(selection.firstObject().name());
    dialog.addAccessoryView(symbolNameView);

    // Choose library and page
    var view = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 50));
    view.setFlipped(true);

    var libraryTitleView = addTextLabelToView_withRect("Library:", view, NSMakeRect(0, 0, 145, 20));
    var pageTitleView = addTextLabelToView_withRect("Page:", view, NSMakeRect(155, 0, 145, 20));

    // Library
    var libraryListView = NSPopUpButton.alloc().initWithFrame(NSMakeRect(0, 20, 145, 30));
    var loopUserLibraries = userLibraries.objectEnumerator();
    var userLibrary;
    while (userLibrary = loopUserLibraries.nextObject()) {
        libraryListView.addItemWithTitle("");
        libraryListView.lastItem().setTitle(userLibrary.name());
    }
    view.addSubview(libraryListView);

    var selectedLibraryIndex = getPreferences(context, "libraryIndexForCreateSymbol") || 0;
    if (selectedLibraryIndex >= userLibraries.count()) {
        selectedLibraryIndex = 0;
    }
    libraryListView.selectItemAtIndex(selectedLibraryIndex);

    // Page
    var pageListView = NSPopUpButton.alloc().initWithFrame(NSMakeRect(155, 20, 145, 30));
    var selectedLibrary = userLibraries.objectAtIndex(libraryListView.indexOfSelectedItem());
    reloadPagesInLibrary_toPopUpButton(selectedLibrary, pageListView);
    view.addSubview(pageListView);

    // Library button action
    libraryListView.setCOSJSTargetFunction(function(sender) {
        var selectedLibraryIndex = sender.indexOfSelectedItem();
        var selectedLibrary = userLibraries.objectAtIndex(selectedLibraryIndex);
        reloadPagesInLibrary_toPopUpButton(selectedLibrary, pageListView);
    });


    dialog.addAccessoryView(view);
    dialog.addButtonWithTitle("OK");
    dialog.addButtonWithTitle("Cancel");

    dialog.alert().window().setInitialFirstResponder(symbolNameView);

    var responseCode = dialog.runModal();
    if (responseCode == 1000) {

        setPreferences(context, "libraryIndexForCreateSymbol", libraryListView.indexOfSelectedItem());

        var selectedLibrary = userLibraries.objectAtIndex(libraryListView.indexOfSelectedItem());
        var selectedLibraryPath = selectedLibrary.locationOnDisk().path();
        var libraryFileURL = NSURL.fileURLWithPath(selectedLibraryPath);

        // log(selectedLibrary.name());
        // log(selectedPage.name())

        // Convert selected layer to symbol master
        var layers = MSLayerArray.arrayWithLayers(selection);
        if (MSSymbolCreator.canCreateSymbolFromLayers(layers)) {
            var symbolName = symbolNameView.stringValue();
            var symbolInstance = MSSymbolCreator.createSymbolFromLayers_withName_onSymbolsPage(layers, symbolName, false);
            var symbolMaster = symbolInstance.symbolMaster();
            // symbolMaster.setRect(symbolInstance.absoluteRect().rect());
            symbolMaster.setLayerListExpandedType(1);
            symbolInstance.removeFromParent();

        } else {
            document.showMessage("ðŸ˜® Can't create symbol from selected layer.");
            return;
        }

        // Library file is opened
        var openedSelectedLibrary = findDocumentFromOpenedDocuments_withPath(selectedLibraryPath);
        if (openedSelectedLibrary) {
            var libraryDocument = openedSelectedLibrary;
        } else {
            try {
                var libraryDocument = MSDocument.alloc().init();
                libraryDocument.readFromURL_ofType_error(libraryFileURL, "com.bohemiancoding.sketch.drawing", nil);
            } catch (error) {
                document.showMessage("ðŸ˜® Can't open the library file.");
                return;
            }
        }

        // Add symbol master to library
        var targetPage = libraryDocument.pages().objectAtIndex(pageListView.indexOfSelectedItem());
        var originForSymbolMaster = targetPage.originForNewArtboard();

        targetPage.addLayer(symbolMaster);
        document.currentPage().removeLayer(symbolMaster);

        var symbolMasterInLibrary = libraryDocument.documentData().symbolWithID(symbolMaster.symbolID());
        symbolMasterInLibrary.frame().setX(originForSymbolMaster.x);
        symbolMasterInLibrary.frame().setY(originForSymbolMaster.y);

        // Save
        if (!openedSelectedLibrary) {
            libraryDocument.writeToURL_ofType_forSaveOperation_originalContentsURL_error(
                libraryFileURL, "com.bohemiancoding.sketch.drawing", NSSaveOperation, nil, nil
            );
            libraryDocument.close();
        }



    }

};

function findDocumentFromOpenedDocuments_withPath(path) {
    var documents = NSDocumentController.sharedDocumentController().documents();
    var loopDocuments = documents.objectEnumerator();
    var document;
    while (document = loopDocuments.nextObject()) {
        if (document.fileURL()) {
            if (document.fileURL().path() == path) {
                return document;
            }
        }
    }
    return null;
}

function reloadPagesInLibrary_toPopUpButton(library, button) {

    button.removeAllItems();

    var pages = library.document().pages();
    var selectItemIndex = 0;
    var loopPages = pages.objectEnumerator();
    var page;
    while (page = loopPages.nextObject()) {
        button.addItemWithTitle("");
        if (page == library.document().symbolsPage()) {
            button.lastItem().setTitle(page.name() + " *");
            selectItemIndex = pages.indexOfObject(page);
        } else {
            button.lastItem().setTitle(page.name());
        }
    }

    button.selectItemAtIndex(selectItemIndex);
}

function addTextLabelToView_withRect(text, view, rect) {
    var textView = NSTextField.alloc().initWithFrame(rect);
    textView.setStringValue(text);
    textView.setBezeled(false);
    textView.setEditable(false);
    textView.setDrawsBackground(false);
    view.addSubview(textView);
    return textView;
}
