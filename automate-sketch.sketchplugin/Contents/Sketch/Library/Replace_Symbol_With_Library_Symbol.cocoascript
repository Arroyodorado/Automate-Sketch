@import "../Libraries/Google_Analytics.cocoascript";

var onRun = function(context) {

    var document = context.document;
    var documentData = document.documentData();
    var selection = context.selection;
    var assetLibraryController = AppController.sharedInstance().librariesController();
    var availableLibraries = assetLibraryController.availableLibraries();

    if (documentData.localSymbols().count() == 0) {
        document.showMessage("Current document have not any local symbol.");
        return;
    }

    if (availableLibraries.count() == 0) {
        document.showMessage("You have not any available library.");
        return;
    }

    if (selection.count() == 0) {
        document.showMessage("Please select one symbol.");
        return;
    }

    var selectedSymbol;
    var loopSelection = selection.objectEnumerator();
    var layer;
    while (layer = loopSelection.nextObject()) {
        if (layer.class() == "MSSymbolInstance")) {
            if (!layer.symbolMaster().isForeign()) {
                selectedSymbol = layer.symbolMaster();
                break;
            }
        }
        if (layer.class() == "MSSymbolMaster") {
            selectedSymbol = layer;
            break;
        }
    }

    if (!selectedSymbol) {
        document.showMessage("You have not select any symbol.");
        return;
    }

    // Dialog
    var dialog = COSAlertWindow.alloc().init();
    dialog.setMessageText("Replace Symbol With Library Symbol");
    dialog.setInformativeText(
        "You current select the symbol master named \"" + selectedSymbol.name() +"\", Click the image of symbol to replace."
    );

    dialog.addTextLabelWithValue("Choose A Library:");
    var selectBox = NSPopUpButton.alloc().initWithFrame(NSMakeRect(0, 0, 300, 28));
    var loopAvailableLibraries = availableLibraries.reverseObjectEnumerator();
    var availableLibrary;
    while (availableLibrary = loopAvailableLibraries.nextObject()) {
        selectBox.addItemWithTitle("");
        selectBox.lastItem().setTitle(availableLibrary.name());
    }
    dialog.addAccessoryView(selectBox);

    dialog.addTextLabelWithValue("All Symbols:");
    var scrollView = NSScrollView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 300));
    scrollView.setHasVerticalScroller(true);
    scrollView.setBorderType(NSBezelBorder);
    dialog.addAccessoryView(scrollView);

    var checkboxSize = NSButton.alloc().initWithFrame(NSMakeRect(0, 0, 300, 40));
    checkboxSize.setButtonType(NSSwitchButton);
    checkboxSize.setTitle("Set to original size.");
    checkboxSize.setState(NSOffState);
    dialog.addAccessoryView(checkboxSize);

    var selectedLibrary = availableLibraries.lastObject();
    reloadSymbolData(context, scrollView, selectedSymbol, selectedLibrary, checkboxSize);

    selectBox.setCOSJSTargetFunction(function(sender) {
        var i = availableLibraries.count() - sender.indexOfSelectedItem() - 1;
        var selectedLibrary = availableLibraries.objectAtIndex(i);
        reloadSymbolData(context, scrollView, selectedSymbol, selectedLibrary, checkboxSize);
    });

    dialog.addButtonWithTitle("Cancel");
    dialog.runModal();

    ga(context, "UA-99098773-3", "Symbol", context.command.identifier());

};

function reloadSymbolData(context, view, symbol, library, checkboxSize) {

    var document = context.document;
    var documentData = document.documentData();

    var allSymbols = library.document().allSymbols().mutableCopy();
    var sortByName = NSSortDescriptor.sortDescriptorWithKey_ascending("name", true);
    allSymbols.sortUsingDescriptors(NSArray.arrayWithObject(sortByName));

    var symbolWithSameID = library.document().symbolWithID(symbol.symbolID());

    var symbolsWithSameSize = NSMutableArray.alloc().init();
    var loopAllSymbols_1 = allSymbols.objectEnumerator();
    var symbol_1;
    while (symbol_1 = loopAllSymbols_1.nextObject()) {
        if (NSEqualSizes(symbol_1.rect().size, symbol.rect().size)) {
            symbolsWithSameSize.addObject(symbol_1);
        }
    }

    if (symbolWithSameID) {
        allSymbols.removeObject(symbolWithSameID);
        allSymbols.insertObject_atIndex(symbolWithSameID, 0);
    }

    if (symbolsWithSameSize.count() > 0) {
        allSymbols.removeObjectsInArray(symbolsWithSameSize);
        var indexes = NSIndexSet.alloc().initWithIndexesInRange(NSMakeRange(0, symbolsWithSameSize.count()));
        allSymbols.insertObjects_atIndexes(symbolsWithSameSize, indexes);
    }

    var itemHeight = 70;
    var itemsCount = allSymbols.count();
    var contentView = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, (itemsCount + 0.5) * itemHeight));
    contentView.setFlipped(true);

    var loopAllSymbols_2 = allSymbols.objectEnumerator();
    var symbol_2;
    while (symbol_2 = loopAllSymbols_2.nextObject()) {
        var index = allSymbols.indexOfObject(symbol_2);
        var itemView = NSView.alloc().initWithFrame(NSMakeRect(0, itemHeight * index, 300, itemHeight));
        itemView.setFlipped(true);

        var textLabelName = NSTextField.alloc().initWithFrame(NSMakeRect(75, 10, 220, 20));
        textLabelName.setStringValue(symbol_2.name());
        textLabelName.setBezeled(false);
        textLabelName.setEditable(false);
        itemView.addSubview(textLabelName);

        if (symbol_2.symbolID().isEqualToString(symbol.symbolID)) {
            var textLabelNote = createLabelNote("Same ID");
            itemView.addSubview(textLabelNote);
        }

        if (symbolsWithSameSize.containsObject(symbol_2)) {
            var textLabelNote = createLabelNote("Same Size");
            itemView.addSubview(textLabelNote);
        }

        var imageButton = NSButton.alloc().initWithFrame(NSMakeRect(0, 0, itemHeight, itemHeight));
        imageButton.setTitle(symbol_2.symbolID());
        imageButton.setBordered(0);

        // Symbol preview image.
        var layerAncestry = MSImmutableLayerAncestry.alloc().initWithMSLayer(symbol_2);
        var symbolPreviewImage = MSSymbolPreviewGenerator.imageForSymbolAncestry_withSize_colorSpace_trimmed(
            layerAncestry, CGSizeMake(itemHeight, itemHeight), NSColorSpace.sRGBColorSpace(), true
        );
        imageButton.setImage(symbolPreviewImage);
        itemView.addSubview(imageButton);

        imageButton.setCOSJSTargetFunction(function(sender) {

            // Import symbol
            var assetLibraryController = AppController.sharedInstance().librariesController();
            var importedSymbol = assetLibraryController.importForeignSymbol_fromLibrary_intoDocument(
                library.symbolWithID(sender.title()), library, documentData
            );

            // Replace all instances of symbol master
            var instancesWillReplaced = symbol.allInstances();
            var loopInstancesWillReplaced = instancesWillReplaced.objectEnumerator();
            var instanceWillReplaced;
            while (instanceWillReplaced = loopInstancesWillReplaced.nextObject()) {
                instanceWillReplaced.changeInstanceToSymbol(importedSymbol.symbolMaster());
            }

            // Symbol ID map
            var symbolIDMap = NSMutableDictionary.alloc().init();
            symbolIDMap.setObject_forKey(importedSymbol.symbolMaster().symbolID(), symbol.symbolID());

            // Delete symbolMaster
            symbol.removeFromParent();

            // Change overrides mapping
            var instancesInCurrentDocument = instancesInDocument(document);
            var loopInstancesInCurrentDocument = instancesInCurrentDocument.objectEnumerator();
            var instance;
            while (instance = loopInstancesInCurrentDocument.nextObject()) {
                instance.updateOverridesWithObjectIDMap(symbolIDMap);
                if (instance.symbolMaster() == importedSymbol.symbolMaster()) {
                    instance.setName(instance.symbolMaster().name());
                    if (checkboxSize.state()) {
                        instance.resetSizeToMaster();
                    }
                }
            }
            document.reloadInspector();

            NSApp.stopModal();
        });

        var divider = NSView.alloc().initWithFrame(NSMakeRect(0, itemHeight - 1, 300, 1));
        divider.setWantsLayer(1);
        divider.layer().setBackgroundColor(CGColorCreateGenericRGB(0, 0, 0, 0.1));
        itemView.addSubview(divider);

        contentView.addSubview(itemView);
    }

    view.setDocumentView(contentView);

}

function createLabelNote(text) {
    var textLabelNote = NSTextField.alloc().initWithFrame(NSMakeRect(75, 30, 200, 20));
    textLabelNote.setStringValue(text);
    textLabelNote.setFont(NSFont.systemFontOfSize(10));
    textLabelNote.setTextColor(NSColor.whiteColor());
    textLabelNote.setBackgroundColor(NSColor.blueColor());
    textLabelNote.setWantsLayer(true);
    textLabelNote.layer().setCornerRadius(3);
    textLabelNote.setBezeled(false);
    textLabelNote.setEditable(false);
    textLabelNote.sizeToFit();
    return textLabelNote;
}

function instancesInDocument(document) {
    var allInstances = NSMutableArray.alloc().init();
    var loopPages = document.pages().objectEnumerator();
    var page;
    while (page = loopPages.nextObject()) {
        var predicate = NSPredicate.predicateWithFormat("className == %@", "MSSymbolInstance");
        var instancesInPage = page.children().filteredArrayUsingPredicate(predicate);
        allInstances.addObjectsFromArray(instancesInPage);
    }
    return allInstances;
}
