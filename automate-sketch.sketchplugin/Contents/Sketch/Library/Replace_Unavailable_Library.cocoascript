@import "../Libraries/Google_Analytics.cocoascript";
@import "../Libraries/UI_Controls.cocoascript";

var onRun = function(context) {

    ga(context, "Layer");

    var document = context.document;
    var documentData = document.documentData();

    var assetLibraryController = AppController.sharedInstance().librariesController();
    var allLibraries = assetLibraryController.libraries();

    var librariesUsedInDocument = {};
    var foreignSymbols = documentData.foreignSymbols();
    if (foreignSymbols.count() == 0) {
        document.showMessage("Current document have not use any library.");
        return;
    }

    foreignSymbols.forEach(function(symbol) {
        var libraryForSymbol = assetLibraryController.libraryForShareableObject(symbol.symbolMaster());
        if (libraryForSymbol) {
            var libraryId = libraryForSymbol.libraryID();
            if (!librariesUsedInDocument[libraryId]) {
                var libraryInfo = {
                    name: libraryForSymbol.name(),
                    id: libraryId,
                    status: "Working",
                    symbolCount: 1
                };
                if (libraryForSymbol.enabled() == false) {
                    libraryInfo.status = "Library Disabled"
                }
                librariesUsedInDocument[libraryId] = libraryInfo;
            }
            else {
                librariesUsedInDocument[libraryId]["symbolCount"] ++;
            }
        }
        else {
            var libraryId = symbol.libraryID();
            if (!librariesUsedInDocument[libraryId]) {
                librariesUsedInDocument[libraryId] = {
                    name: symbol.sourceLibraryName(),
                    id: libraryId,
                    status: "Library Missed",
                    symbolCount: 1
                };
            }
            else {
                librariesUsedInDocument[libraryId]["symbolCount"] ++;
            }
        }
    });

    // Dialog
    var dialog = UI.cosDialog(
        "Replace Library",
        "Relink or enable a library to fix a unavailable library.",
        ["Close"]
    );

    var scrollView = UI.scrollView(300);
    dialog.addAccessoryView(scrollView);

    loadData(context, scrollView, Object.values(librariesUsedInDocument));

    dialog.runModal();
};

function loadData(context, scrollView, data) {

    var itemsCount = data.length;
    var itemHeight = 135;
    var contentView = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, itemsCount * itemHeight + 10));
    contentView.setFlipped(true);

    data.forEach(function(item, index) {
        var itemView = NSView.alloc().initWithFrame(NSMakeRect(0, itemHeight * index, 300, itemHeight));
        itemView.setFlipped(true);

        var libraryNameLabel = UI.textLabel(item.name, [5, 10, 300, 20]);
        libraryNameLabel.setFont(NSFont.boldSystemFontOfSize(12));
        itemView.addSubview(libraryNameLabel);

        var libraryIdLabel = UI.textLabel(item.id, [5, 30, 300, 20]);
        libraryIdLabel.setFont(NSFont.monospacedDigitSystemFontOfSize_weight(12, NSFontWeightRegular));
        libraryIdLabel.setTextColor(NSColor.grayColor());
        itemView.addSubview(libraryIdLabel);

        var infoText = `${item.symbolCount} symbol${item.symbolCount > 1 ? "s" : ""}  |  ${item.status}`;
        var libraryCountLabel = UI.textLabel(infoText, [5, 50, 300, 20]);
        itemView.addSubview(libraryCountLabel);

        var replaceLabel = UI.textLabel("Replace with another library:", [5, 80, 300, 20]);
        itemView.addSubview(replaceLabel);

        var replaceButton = UI.popupButton(['X', "X"], [5, 100, 200, 25]);
        itemView.addSubview(replaceButton);

        var divider = UI.divider([0, itemHeight - 1, 300, 1]);
        itemView.addSubview(divider);

        contentView.addSubview(itemView);
    });
    scrollView.setDocumentView(contentView);
}
