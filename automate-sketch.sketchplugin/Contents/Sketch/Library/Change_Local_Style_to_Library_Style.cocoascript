@import "../Libraries/Google_Analytics.cocoascript";
@import "../Libraries/UI_Controls.cocoascript";

var onRun = function(context) {

    var document = context.document;
    if (MSApplicationMetadata.metadata().appVersion < 51) {
        document.showMessage("ðŸ˜® You have to update Sketch 51+ to use thie feature.");
        return;
    }

    var documentData = document.documentData();
    var allLocalTextStyles = documentData.layerTextStyles().objects();
    var allLocalLayerStyles = documentData.layerStyles().objects();
    var allLocalStyle;
    var styleType;
    var pluginIdentifier = context.command.identifier();
    if (pluginIdentifier == "change_local_text_style_to_library_text_style") {
        allLocalStyle = allLocalTextStyles;
        styleType = "text";
    }
    if (pluginIdentifier == "change_local_layer_style_to_library_layer_style") {
        allLocalStyle = allLocalLayerStyles;
        styleType = "layer";
    }
    if (allLocalStyle.count() == 0) {
        document.showMessage(`No any ${styleType} styles in current document.`);
        return;
    }

    var assetLibraryController = AppController.sharedInstance().librariesController();
    var availableLibraries = assetLibraryController.availableLibraries();
    if (availableLibraries.count() == 0) {
        document.showMessage("You have not any available library.");
        return;
    }

    // Dialog
    var dialog = UI.cosDialog(
        `Change Local ${capitalize(styleType)} Style to Library ${capitalize(styleType)} Style`,
        `Change the following local ${styleType} styles to change it to foreign ${styleType} style from library.`,
        ["OK", "Cancel"]
    );

    var libraryLabelView = UI.textLabel("Choose A Library");
    dialog.addAccessoryView(libraryLabelView);

    var libraryNames = [];
    availableLibraries.forEach(function(library) {
        libraryNames.push(library.name());
    });
    var chooseALibraryView = UI.popupButton(libraryNames, 200);
    dialog.addAccessoryView(chooseALibraryView);

    var scrollView = UI.scrollView(260);
    dialog.addAccessoryView(scrollView);

    var selectAllView = UI.checkBox(NSOnState, "Select / Deselect All.");
    selectAllView.setAllowsMixedState(true);
    dialog.addAccessoryView(selectAllView);

    var resetStyleView = UI.checkBox(NSOffState, `Reset all ${styleType} stytle.`);
    dialog.addAccessoryView(resetStyleView);

    // Init
    var allMatchStyles = [];
    loadData(availableLibraries.firstObject());

    // Action
    chooseALibraryView.setCOSJSTargetFunction(function(sender) {
        var selectedLibrary = availableLibraries.objectAtIndex(sender.indexOfSelectedItem());
        loadData(selectedLibrary);
    });

    // Run
    var responseCode = dialog.runModal();
    if (responseCode == 1000) {

        if (allMatchStyles.length == 0) {
            return;
        }

        // Filter selected styles
        var selectedMatchStyles = [];
        scrollView.documentView().subviews().forEach(function(view, index) {
            if (view.subviews().firstObject().state() == NSOnState) {
                selectedMatchStyles.push(allMatchStyles[index]);
            }
        });

        // Add library style to foreign style
        var selectedLibrary = availableLibraries.objectAtIndex(chooseALibraryView.indexOfSelectedItem());
        var localToForeignStyleIDMapping = {};
        selectedMatchStyles.forEach(function(matchItem) {
            var froeignStyle;
            if (styleType == "text") {
                froeignStyle = foreignTextStyleInDocument_forSharedStyle_fromLibray(documentData, matchItem.library, selectedLibrary);
            }
            if (styleType == "layer") {
                froeignStyle = foreignLayerStyleInDocument_forSharedStyle_fromLibray(documentData, matchItem.library, selectedLibrary);
            }
            localToForeignStyleIDMapping[matchItem.local.objectID()] = froeignStyle.localShareID();
        });

        // Change sharedObjectID
        var allLayerWithLocalStyle = getAllLayersWithSharedObjectIDs(document, Object.keys(localToForeignStyleIDMapping));
        allLayerWithLocalStyle.forEach(function(layer) {
            var localStyleID = layer.style().sharedObjectID();
            layer.style().setSharedObjectID(localToForeignStyleIDMapping[localStyleID]);
        });

        // TODO: Remove local style
        // var layerStyles = documentData.layerStyles(); // MSSharedStyleContainer
        // var textStyles = documentData.layerTextStyles(); // MSSharedTextStyleContainer
        // MSSharedObjectContainer.removeSharedObject();

        // TODO: Reset Text/Layer Style


    }

    function loadData(library) {

        var libraryDocumentData = library.document();
        var allLibraryTextStyles = libraryDocumentData.layerTextStyles().objects();
        var allLibraryLayerStyles = libraryDocumentData.layerStyles().objects();
        var allLibraryStyles;
        if (styleType == "text") {
            allLibraryStyles = allLibraryTextStyles;
        }
        if (styleType == "layer") {
            allLibraryStyles = allLibraryLayerStyles;
        }

        allMatchStyles = [];
        allLocalStyle.forEach(localStyle => {
            allLibraryStyles.forEach(libraryStyle => {
                if (localStyle.value().propertiesAreEqual(libraryStyle.value())) {
                    allMatchStyles.push({
                        "local": localStyle,
                        "library": libraryStyle
                    });
                }
            });
        });

        if (allMatchStyles.length == 0) {
            var contentView = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 260));
            contentView.setFlipped(true);
            var noStyleTipView = UI.textLabel(`No any match ${styleType} styles in this library.`, [0, 120, 300, 30]);
            noStyleTipView.setTextColor(NSColor.grayColor());
            noStyleTipView.setAlignment(NSCenterTextAlignment);
            contentView.addSubview(noStyleTipView);
            scrollView.setDocumentView(contentView);
            selectAllView.setState(NSOffState);
            selectAllView.setEnabled(false);
            return;
        }

        selectAllView.setState(NSOnState);
        selectAllView.setEnabled(true);

        var itemHeight = 80;
        var itemsCount = allMatchStyles.length;
        var contentView = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, itemsCount * itemHeight));
        contentView.setFlipped(true);

        var selectedItemsCount = allMatchStyles.length;
        allMatchStyles.forEach(function(item, index) {
            var itemView = NSView.alloc().initWithFrame(NSMakeRect(0, itemHeight * index, 300, itemHeight));
            itemView.setFlipped(true);

            var checkbox = UI.checkBox(NSOnState, "", [10, 0, 300, itemHeight]);
            itemView.addSubview(checkbox);
            checkbox.setCOSJSTargetFunction(function(sender) {
                if (sender.state() == NSOffState) {
                    selectedItemsCount --;
                }
                if (sender.state() == NSOnState) {
                    selectedItemsCount ++;
                }
                if (selectedItemsCount == allMatchStyles.length) {
                    selectAllView.setState(NSOnState);
                } else if (selectedItemsCount == 0) {
                    selectAllView.setState(NSOffState);
                } else {
                    selectAllView.setState(NSMixedState);
                }
            });
            selectAllView.setCOSJSTargetFunction(function(sender) {
                if (sender.state() == NSOnState || sender.state() == NSMixedState) {
                    sender.setState(NSOnState);
                    selectedItemsCount = allMatchStyles.length;
                    scrollView.documentView().subviews().forEach(function(view) {
                        view.subviews().firstObject().setState(NSOnState);
                    });
                } else {
                    selectedItemsCount = 0;
                    scrollView.documentView().subviews().forEach(function(view) {
                        view.subviews().firstObject().setState(NSOffState);
                    });
                }
            });

            if (styleType == "text") {
                // Preview image
                var textStyleTempLayer = MSTextLayer.alloc().init();
                textStyleTempLayer.setStringValue(item.local.name());
                textStyleTempLayer.setStyle(item.local.style());
                var textLayerWidth = textStyleTempLayer.frame().width();
                var textLayerHeight = textStyleTempLayer.frame().height();
                var textStyleTempArtboard = MSArtboardGroup.alloc().init();
                textStyleTempArtboard.frame().setWidth(textLayerWidth);
                textStyleTempArtboard.frame().setHeight(textLayerHeight);
                textStyleTempLayer.moveToLayer_beforeLayer(textStyleTempArtboard, nil);
                var layerAncestry = textStyleTempArtboard.ancestry();
                var previewImage = MSSymbolPreviewGenerator.imageForSymbolAncestry_withSize_colorSpace_trimmed(
                    layerAncestry, CGSizeMake(textLayerWidth * 2, textLayerHeight * 2), NSColorSpace.sRGBColorSpace(), false
                );
                if (textLayerWidth <= 260 || textLayerHeight <= 40) {
                    var imageView = NSImageView.alloc().initWithFrame(NSMakeRect(35, 5, textLayerWidth, textLayerHeight));
                } else {
                    var imageView = NSImageView.alloc().initWithFrame(NSMakeRect(35, 5, 260, 40));
                }
                imageView.setImage(previewImage);
                imageView.setWantsLayer(true);
                // Add gray background color to white font
                var textColor = MSColor.alloc().initWithImmutableObject(textStyleTempLayer.textColor());
                if (textColor.fuzzyIsEqualExcludingAlpha(MSColor.whiteColor())) {
                    imageView.setBackgroundColor(NSColor.grayColor());
                }
                itemView.addSubview(imageView);

                var descText = item.local.style().textStyle().treeAsDictionary().NSFont.name + " â€” " +
                    item.local.style().textStyle().treeAsDictionary().NSFont.attributes.NSFontSizeAttribute + "px";
                var descView = UI.textLabel(descText, [35, 40, 260, 16]);
                descView.setWantsLayer(true);
                descView.setTextColor(NSColor.grayColor());
                itemView.addSubview(descView);

                var foreignStyleName = item.library.name();
                var nameView = UI.textLabel(foreignStyleName, [35, 56, 260, 16]);
                nameView.setWantsLayer(true);
                itemView.addSubview(nameView);
            }

            // TODO: layer view
            if (styleType == "layer") {

            }

            var divider = NSView.alloc().initWithFrame(NSMakeRect(0, itemHeight - 1, 300, 1));
            divider.setWantsLayer(1);
            divider.layer().setBackgroundColor(CGColorCreateGenericRGB(0, 0, 0, 0.1));
            itemView.addSubview(divider);

            contentView.addSubview(itemView);
        });
        scrollView.setDocumentView(contentView);
    }

};

function getAllLayersWithSharedObjectIDs(document, ids) {
    var layers = NSMutableArray.alloc().init();
    var idArray = NSArray.arrayWithArray(ids);
    var loopPages = document.pages().objectEnumerator();
    var page;
    while (page = loopPages.nextObject()) {
        var predicateSupportType = NSPredicate.predicateWithFormat(
            "className == %@ OR className == %@ OR className == %@ OR className == %@",
            "MSShapeGroup", "MSTextLayer", "MSLayerGroup", "MSBitmapLayer"
        );
        var predicateSharedStyle = NSPredicate.predicateWithFormat(
            "style.sharedObjectID IN %@",
            idArray
        );
        var layersCanApplyStyleInPage = page.children().filteredArrayUsingPredicate(predicateSupportType);
        var layersWithSharedStyleInPage = layersCanApplyStyleInPage.filteredArrayUsingPredicate(predicateSharedStyle);
        layers.addObjectsFromArray(layersWithSharedStyleInPage);
    }
    return layers;
}

function foreignTextStyleInDocument_forSharedStyle_fromLibray(documentData, sharedStyle, library) {
    for (var i = 0; i < documentData.foreignTextStyles().count(); i++) {
        var foreignTextStyle = documentData.foreignTextStyles().objectAtIndex(i);
        if (String(sharedStyle.objectID()) == String(foreignTextStyle.remoteShareID())) {
            return foreignTextStyle;
        }
    }
    var foreignTextStyle = MSForeignTextStyle.alloc().initWithOriginalObject_inLibrary(sharedStyle, library);
    documentData.addForeignTextStyle(foreignTextStyle);
    return foreignTextStyle;
}

function foreignLayerStyleInDocument_forSharedStyle_fromLibray(documentData, sharedStyle, library) {
    for (var i = 0; i < documentData.foreignLayerStyles().count(); i++) {
        var foreignLayerStyle = documentData.foreignLayerStyles().objectAtIndex(i);
        if (String(sharedStyle.objectID()) == String(foreignLayerStyle.remoteShareID())) {
            return foreignLayerStyle;
        }
    }
    var foreignLayerStyle = MSForeignLayerStyle.alloc().initWithOriginalObject_inLibrary(sharedStyle, library);
    documentData.addForeignLayerStyle(foreignLayerStyle);
    return foreignLayerStyle;
}

function capitalize(str) {
    return str[0].toUpperCase() + str.slice(1);
}
