@import "../Libraries/Google_Analytics.cocoascript";

var onRun = function(context) {

    var document = context.document;
    var documentData = document.documentData();

    if (context.command.identifier() == "remove_unused_layer_styles") {

        if (documentData.layerStyles().numberOfSharedStyles() == 0) {
            document.showMessage("Document have no any layer style.");
            return;
        }

        createDialog(context, 0);

    }

    if (context.command.identifier() == "remove_unused_text_styles") {

        if (documentData.layerTextStyles().numberOfSharedStyles() == 0) {
            document.showMessage("Document have no any text style.");
            return;
        }

        createDialog(context, 1);

    }

    ga(context, "UA-99098773-3", "Style", context.command.identifier());

};

function createDialog(context, type) {

    var document = context.document;
    var documentData = document.documentData();
    var styles = (type == 0) ? documentData.layerStyles() : documentData.layerTextStyles();
    var stylesCopy = styles.objectsSortedByName().mutableCopy();
    var loopPages = document.pages().objectEnumerator();
    var page;
    while (page = loopPages.nextObject()) {
        var predicate = (type == 0) ?
            NSPredicate.predicateWithFormat("className != %@ && style.sharedObjectID != nil", "MSTextLayer") :
            NSPredicate.predicateWithFormat("className == %@ && style.sharedObjectID != nil", "MSTextLayer");
        var layers = page.children().filteredArrayUsingPredicate(predicate);
        var loopLayers = layers.objectEnumerator();
        var layer;
        while (layer = loopLayers.nextObject()) {
            var style = styles.sharedObjectWithID(layer.style().sharedObjectID());
            stylesCopy.removeObject(style);
        }
    }

    if (stylesCopy.count() == 0) {
        document.showMessage("👍 Document have no any unused " + ((type == 0) ? "layer" : "text") + " style.");
        return;
    }

    var dialog = COSAlertWindow.alloc().init();
    var title = (type == 0) ? "Remove Unused Layer Styles" : "Remove Unused Text Styles";
    dialog.setMessageText(title);
    dialog.setInformativeText("You can remove unused styles from list. Uncheck to keep it.");

    var scrollView = NSScrollView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 300));
    scrollView.setHasVerticalScroller(true);
    scrollView.setBorderType(NSBezelBorder);
    dialog.addAccessoryView(scrollView);

    var contentView = createDataView(stylesCopy);
    scrollView.setDocumentView(contentView);

    dialog.addButtonWithTitle("OK");
    dialog.addButtonWithTitle("Cancel");

    var responseCode = dialog.runModal();
    if (responseCode == 1000) {
        var subViews = contentView.subviews();
        var loopSubViews = subViews.objectEnumerator();
        var view;
        var count = 0;
        while (view = loopSubViews.nextObject()) {
            var index = subViews.indexOfObject(view);
            var checkbox = view.subviews().firstObject();
            if (checkbox.state()) {
                styles.removeSharedObject(stylesCopy.objectAtIndex(index));
                count ++;
            }
        }

        var message;
        if (count > 1) {
            message = "🎉 " + count + ((type == 0) ? " layer" : " text") + " styles have been removed.";
        } else if (count == 1) {
            message = "😊 1 " + ((type == 0) ? " layer" : " text") + " style have been removed.";
        }
        document.showMessage(message);

    }

};

function createDataView(items) {

    var itemHeight = 40;
    var itemsCount = items.count();
    var contentView = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, (itemsCount + 0.5) * itemHeight));
    contentView.setFlipped(true);

    var loopItems = items.objectEnumerator();
    var item;
    while (item = loopItems.nextObject()) {

        var index = items.indexOfObject(item);
        var itemView = NSView.alloc().initWithFrame(NSMakeRect(0, itemHeight * index, 300, itemHeight));
        itemView.setFlipped(true);

        var checkbox = NSButton.alloc().initWithFrame(NSMakeRect(10, 0, 300, 40));
        var label = item.name() ? " " + item.name() : "";
        checkbox.setButtonType(NSSwitchButton);
        checkbox.setTitle(label);
        checkbox.setState(NSOnState);
        itemView.addSubview(checkbox);

        var divider = NSView.alloc().initWithFrame(NSMakeRect(0, 39, 300, 1));
        divider.setWantsLayer(1);
        divider.layer().setBackgroundColor(CGColorCreateGenericRGB(0, 0, 0, 0.1));
        itemView.addSubview(divider);

        contentView.addSubview(itemView);
    }

    return contentView;
}
