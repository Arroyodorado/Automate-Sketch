@import "../Libraries/Preferences.cocoascript";
@import "../Libraries/Google_Analytics.cocoascript";

var tileLayersByPositionY = function(context) {
    tileLayer(context, "posy");
};

var tileLayersByPositionX = function(context) {
    tileLayer(context, "posx");
};

var tileLayersHorizontallyByIndex = function(context) {
    tileLayer(context, "horizontallyByIndex");
};

var tileLayersVerticallyByIndex = function(context) {
    tileLayer(context, "verticallyByIndex");
};

var customTileLayers = function(context) {

    var document = context.document;
    var selection = context.selection;

    if (selection.count() < 2) {
        document.showMessage("Please select more than 2 layers.");
        return;
    }

    // Get last user input
    var defaultMarginX = getPreferences(context, "tileObjectMarginX") || 20,
        defaultMarginY = getPreferences(context, "tileObjectMarginY") || 20,
        defaultColums = getPreferences(context, "tileObjectColumns") || 10;

    // Dialog
    var dialog = COSAlertWindow.alloc().init();
    dialog.setMessageText("Tile Objects");
    dialog.setInformativeText("Tile objects with grid or any orientations.");
    dialog.addButtonWithTitle("OK");
    dialog.addButtonWithTitle("Cancel");

    dialog.addTextLabelWithValue("How to tile...");
    var selectBox = NSPopUpButton.alloc().initWithFrame(NSMakeRect(0, 0, 300, 30));
    selectBox.addItemsWithTitles([
        "🔣 Grid",
        "➡️ Left to Right",
        "⬇️ Top to Bottom",
        "⬅️ Right to Left",
        "⬆️ Bottom to Top",
        "↘️ TopLeft to BottomRight",
        "↖️ BottomRight to TopLeft",
        "↗️ BottomLeft to TopRight",
        "↙️ TopRight to BottomLeft"
    ]);
    dialog.addAccessoryView(selectBox);

    var view = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 50));
    var inputColumns = andInputGroup(view, 0, 80, "Columns", defaultColums);
    var inputMarginX = andInputGroup(view, 100, 80, "Margin X", defaultMarginX);
    var inputMarginY = andInputGroup(view, 200, 80, "Margin Y", defaultMarginY);
    dialog.addAccessoryView(view);

    var checkboxOrderByName = checkboxView("Order by name.");
    checkboxOrderByName.setState(NSOffState);
    dialog.addAccessoryView(checkboxOrderByName);

    // Run
    var responseCode = dialog.runModal();
    if (responseCode == 1000) {

        var columns = parseInt(inputColumns.stringValue()) || defaultColums,
            marginX = parseInt(inputMarginX.stringValue()) || defaultMarginX,
            marginY = parseInt(inputMarginY.stringValue()) || defaultMarginY;

        setPreferences(context, "tileObjectColumns", columns);
        setPreferences(context, "tileObjectMarginX", marginX);
        setPreferences(context, "tileObjectMarginY", marginY);

        var layers = selection.mutableCopy();
        if (checkboxOrderByName.state()) {
            layers.sort(function(a, b) {
                if (a.name() > b.name()) {
                    return 1;
                }
                if (a.name() < b.name()) {
                    return -1;
                }
                return 0;
            });
        }

        log(layers)

    }

};

function tileLayer(context, orientation) {
    var doc = context.document;
    var selection = context.selection;
    if (selection.count() < 2) {
        doc.showMessage("Please select more than 2 layers.");
    } else {

        var defaultGap = getPreferences(context, "gap") || "0";
        var gap = doc.askForUserInput_initialValue("The gap between two layers. (px)", defaultGap);
            gap = parseInt(gap);

        if (gap) {
            setPreferences(context, "gap", gap);
        }

        // Tile by position x/y
        if (orientation == "posx" || orientation == "posy") {
            var layers = [];
            for (var i = 0; i < selection.count(); i ++) {
                var selectionIndex = i,
                    x = selection[i].frame().x(),
                    y = selection[i].frame().y(),
                    w = selection[i].frame().width(),
                    h = selection[i].frame().height();
                layers.push({
                    "index": selectionIndex,
                    "x": x,
                    "y": y,
                    "w": w,
                    "h": h
                });
            }

            if (orientation == "posx") {
                layers.sort(function(a, b) {
                    return a.x - b.x;
                });
                for (var i = 1; i < layers.length; i ++) {
                    layers[i].x = layers[i-1].x + layers[i-1].w + gap;
                    selection[layers[i].index].frame().setX(
                        layers[i].x
                    );
                }
            }

            if (orientation == "posy") {
                layers.sort(function(a, b) {
                    return a.y - b.y;
                });
                for (var i = 1; i < layers.length; i ++) {
                    layers[i].y = layers[i-1].y + layers[i-1].h + gap;
                    selection[layers[i].index].frame().setY(
                        layers[i].y
                    );
                }
            }
        }

        // Tile horizontally by index
        if (orientation == "horizontallyByIndex") {
            for (var i = 1; i < selection.count(); i ++) {
                selection.objectAtIndex(i).frame().setX(
                    selection.objectAtIndex(i-1).frame().x() + selection.objectAtIndex(i-1).frame().width() + gap
                );
            }
        }

        // Tile vertically by index
        if (orientation == "verticallyByIndex") {
            for (var i = 1; i < selection.count(); i ++) {
                selection.objectAtIndex(i).frame().setY(
                    selection.objectAtIndex(i-1).frame().y() + selection.objectAtIndex(i-1).frame().height() + gap
                );
            }
        }

        // Resize group to fit children
        var loopSelection = selection.objectEnumerator();
        var selectedLayer;
        while (selectedLayer = loopSelection.nextObject()) {
            if (selectedLayer.parentGroup().class() == "MSLayerGroup") {
                selectedLayer.parentGroup().resizeToFitChildrenWithOption(1);
            }
        }

        ga(context, "Arrange");

    }
};

function andInputGroup(view, x, width, label, defaultString) {
    var labelView = NSTextField.alloc().initWithFrame(NSMakeRect(x, 25, width, 25));
    labelView.setDrawsBackground("NO");
    labelView.setEditable("NO");
    labelView.setBezeled("NO");
    labelView.setStringValue(label);
    view.addSubview(labelView);
    var inputView = NSTextField.alloc().initWithFrame(NSMakeRect(x, 0, width, 25));
    inputView.setStringValue(defaultString);
    var formatter = NSNumberFormatter.alloc().init().autorelease();
    inputView.setFormatter(formatter);
    view.addSubview(inputView);
    return inputView;
}

function checkboxView(text) {
    var checkbox = NSButton.alloc().initWithFrame(NSMakeRect(0, 0, 300, 25));
    checkbox.setButtonType(NSSwitchButton);
    checkbox.setTitle(text);
    checkbox.setState(NSOnState);
    return checkbox;
}
