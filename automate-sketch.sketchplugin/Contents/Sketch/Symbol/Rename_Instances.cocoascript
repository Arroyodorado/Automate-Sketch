@import "../Libraries/Preferences.cocoascript";
@import "../Libraries/Google_Analytics.cocoascript";

var onRun = function(context) {

    var document = context.document;
    var selection = context.selection;
    var symbolInstancesInSelection = getSymbolInstancesInSelection(selection);

    if (selection.count() == 0 || symbolInstancesInSelection.count() == 0) {
        document.showMessage("Please select at least one symbol instance.");
        return;
    }

    // Dialog
    var dialog = NSAlert.alloc().init();
    dialog.setMessageText("Rename Instances");
    dialog.setInformativeText("Change the name for all selected sysmbol instances.");
    dialog.addButtonWithTitle("OK");
    dialog.addButtonWithTitle("Cancel");

    // Views
    var views = NSMutableArray.alloc().init();

    var labelNameType = labelView("Change the name to...");
    views.addObject(labelNameType);

    var buttonNameType = NSPopUpButton.alloc().initWithFrame(NSMakeRect(0, 0, 300, 30));
    buttonNameType.addItemsWithTitles([
        "Original name of symbol master.",
        "Base name of symbol master.",
        "1st group name of symbol master.",
        "2nd group name of symbol master.",
        "Custom name."
    ]);
    views.addObject(buttonNameType);

    var labelCustomName = labelView("Custom name");
    views.addObject(labelCustomName);

    var inputCustomName = textFieldView(getPreferences(context, "custom_instance_name") || "");
    textFieldEditable(inputCustomName, false);
    views.addObject(inputCustomName);

    buttonNameType.setCOSJSTargetFunction(function(sender) {
        if (sender.indexOfSelectedItem() == sender.itemArray().count() - 1) {
            textFieldEditable(inputCustomName, true);
        } else {
            textFieldEditable(inputCustomName, false);
        }
    });

    // Layout
    var wrapViewHeight = 0;
    var accessoryView = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 0));
    accessoryView.setFlipped(true);
    views.forEach(function(view) {
        var currentFrame = view.bounds();
        currentFrame.origin.y = wrapViewHeight + 8;
        wrapViewHeight += currentFrame.size.height + 8;
        view.setFrame(currentFrame);
        accessoryView.addSubview(view);
    });

    var viewFrame = accessoryView.frame();
    viewFrame.size.height = wrapViewHeight;
    accessoryView.setFrame(viewFrame);
    dialog.setAccessoryView(accessoryView);

    // Run
    var responseCode = dialog.runModal();
    if (responseCode == 1000) {

        setPreferences(context, "custom_instance_name", inputCustomName.stringValue());

        var loopSymbolInstancesInSelection = symbolInstancesInSelection.objectEnumerator();
        var instance;
        while (instance = loopSymbolInstancesInSelection.nextObject()) {

            // Original name of symbol master.
            if (buttonNameType.indexOfSelectedItem() == 0) {
                instance.setName(instance.symbolMaster().name());
            }

            // Base name of symbol master.
            if (buttonNameType.indexOfSelectedItem() == 1) {
                var lastIndexOfSlash = instance.symbolMaster().name().lastIndexOf("/");
                instance.setName(instance.symbolMaster().name().substr(lastIndexOfSlash + 1).trim());
            }

            // Custom name.
            if (buttonNameType.indexOfSelectedItem() == 2) {
                instance.setName(inputCustomName.stringValue());
            }

        }

    }

    ga(context, "Symbol");

};

function getSymbolInstancesInSelection(selection) {
    var predicate = NSPredicate.predicateWithFormat("className == %@", "MSSymbolInstance");
    return selection.filteredArrayUsingPredicate(predicate);
}

function labelView(text) {
    var textView = NSTextField.alloc().initWithFrame(NSMakeRect(0, 0, 300, 16)));
    textView.setStringValue(text);
    textView.setFont(NSFont.boldSystemFontOfSize(12));
    textView.setTextColor(NSColor.blackColor());
    textView.setBezeled(false);
    textView.setDrawsBackground(false);
    textView.setEditable(false);
    textView.setSelectable(false);
    return textView;
}

function textFieldView(text) {
    var textView = NSTextField.alloc().initWithFrame(NSMakeRect(0, 0, 300, 25)));
    textView.setStringValue(text);
    textView.setFont(NSFont.systemFontOfSize(12));
    return textView;
}

function textFieldEditable(view, bool) {
    if (bool) {
        view.setEditable(true);
        view.setTextColor(NSColor.blackColor());
    } else {
        view.setEditable(false);
        view.setTextColor(NSColor.grayColor());
    }
}
