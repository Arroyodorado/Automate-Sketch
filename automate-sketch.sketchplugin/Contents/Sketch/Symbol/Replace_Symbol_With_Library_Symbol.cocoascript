/*----------------------------------------------------------

Copyright 2017 Ashung Hung

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

----------------------------------------------------------*/

@import "../Libraries/Google_Analytics.cocoascript";

var onRun = function(context) {

    var document = context.document;

    var documentData = document.documentData();
    if (documentData.localSymbols().count() == 0) {
        document.showMessage("Current document have not any local symbol.");
        return;
    }

    var selection = context.selection;
    if (selection.count() == 0) {
        document.showMessage("You have not select any symbol.");
        return;
    }

    var selectedSymbol;
    var loopSelection = selection.objectEnumerator();
    var layer;
    while (layer = loopSelection.nextObject()) {
        if (layer.class() == "MSSymbolInstance")) {
            if (!layer.symbolMaster().isForeign()) {
                selectedSymbol = layer.symbolMaster();
                break;
            }
        }
        if (layer.class() == "MSSymbolMaster") {
            selectedSymbol = layer;
            break;
        }
    }

    if (!selectedSymbol) {
        document.showMessage("You have not select any symbol.");
    }



    // Library list
    var assetLibraryController = AppController.sharedInstance().librariesController();
    var availableLibraries = assetLibraryController.availableLibraries();

    if (availableLibraries.count() == 0) {
        document.showMessage("You have not any available library.");
        return;
    }

    var librariesList = NSMutableArray.alloc().init();
    var loopAvailableLibraries = availableLibraries.objectEnumerator();
    var availableLibrary;
    while (availableLibrary = loopAvailableLibraries.nextObject()) {
        var label = availableLibrary.name();
        librariesList.addObject(label);
    }

    // Choose a library file
    var dialog = COSAlertWindow.alloc().init();
    dialog.setMessageText("Replace Symbol With Library Symbol");
    dialog.setInformativeText(
        "You current select the symbol master named \"" + selectedSymbol.name() +"\", "
    );

    dialog.addTextLabelWithValue("Choose A Library:");
    var selectBox = NSPopUpButton.alloc().initWithFrame(NSMakeRect(0, 0, 300, 28));
    selectBox.addItemsWithTitles(librariesList);
    dialog.addAccessoryView(selectBox);

    dialog.addTextLabelWithValue("All Symbols:");
    var scrollView1 = NSScrollView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 300));
    scrollView1.setHasVerticalScroller(true);
    scrollView1.setBorderType(NSBezelBorder);
    dialog.addAccessoryView(scrollView1);

    var selectedLibrary = availableLibraries.firstObject();
    reloadSymbolData(scrollView1, selectedLibrary);

    selectBox.setCOSJSTargetFunction(function(sender) {
        var selectedLibrary = availableLibraries.objectAtIndex(sender.indexOfSelectedItem());
        reloadSymbolData(scrollView1, selectedLibrary);
    });

    // dialog.addButtonWithTitle("OK");
    dialog.addButtonWithTitle("Cancel");

    var responseCode = dialog.runModal();
    if (responseCode == 1000) {



        // selectedLibrary = availableLibraries.objectAtIndex(selectBox.indexOfSelectedItem());
    }

};

function reloadSymbolData(view, library) {
    var contentView = createSymbolListFromLibrary(library);
    view.setDocumentView(contentView);
}

function createSymbolListFromLibrary(library) {

    var allSymbols = library.document().allSymbols().mutableCopy();
    // Sort by name
    allSymbols.sort(function(a, b) {
        if (a.name() > b.name()) {
            return 1;
        }
        if (a.name() < b.name()) {
            return -1;
        }
        return 0;
    });

    // var suggestSymbols = ;
    // var loopSymbols = allSymbols.objectEnumerator();
    // var symbol;
    // while (symbol = loopSymbols.nextObject()) {
    //
    // }



    var itemHeight = 50;
    var itemsCount = allSymbols.count();
    var contentView = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, itemsCount * itemHeight));
    contentView.setFlipped(true);


    var loopSymbols = allSymbols.objectEnumerator();
    var symbol;
    while (symbol = loopSymbols.nextObject()) {
        var index = allSymbols.indexOfObject(symbol);
        var itemView = NSView.alloc().initWithFrame(NSMakeRect(0, itemHeight * index, 300, itemHeight));
        itemView.setFlipped(true);

        var textLabelName = NSTextField.alloc().initWithFrame(NSMakeRect(70, 10, 200, 20));
        textLabelName.setStringValue(symbol.name());
        textLabelName.setBezeled(false);
        textLabelName.setEditable(false);
        itemView.addSubview(textLabelName);

        var textLabelNote = NSTextField.alloc().initWithFrame(NSMakeRect(70, 30, 200, 20));
        textLabelNote.setStringValue("Same ID");
        textLabelNote.setFont(NSFont.systemFontOfSize(10));
        textLabelNote.setTextColor(NSColor.whiteColor());
        textLabelNote.setBackgroundColor(NSColor.blueColor());
        textLabelNote.setWantsLayer(true);
        textLabelNote.layer().setCornerRadius(3);
        textLabelNote.setBezeled(false);
        textLabelNote.setEditable(false);
        textLabelNote.sizeToFit();
        itemView.addSubview(textLabelNote);

        contentView.addSubview(itemView);
    }


    return contentView;
}
