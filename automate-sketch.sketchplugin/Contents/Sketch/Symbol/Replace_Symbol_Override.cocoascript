@import "../Libraries/Google_Analytics.cocoascript";
@import "../Libraries/UI_Controls.cocoascript";

var onRun = function(context) {

    ga(context, "Symbol");

    var document = context.document;
    var selection = context.selection;
    var documentData = document.documentData();

    var instances;
    if (selection.count() == 0) {
        instances = symbolInstancesInDocument(context);
        if (instances.count() == 0) {
            document.showMessage("Not any instance in selected layers.");
            return;
        }
    } else {
        instances = symbolInstancesInSelection(context);
        if (instances.count() == 0) {
            document.showMessage("Not any instance in document.");
            return;
        }
    }

    var uniqueOverrideValues = NSMutableSet.alloc().init();
    var changeableOverridePoints = NSMutableArray.alloc().init();

    instances.forEach(function(instance) {
        instance.overridePoints().forEach(point => {
            if(point.isSymbolOverride() && isUserChangeableOverride(context, point)) {
                var symbolID = getValueSymbolID(context, instance, point);
                changeableOverridePoints.addObject({
                    "layer": instance, // MSInstance
                    "point": point, // MSPoint
                    "value": symbolID // SymbolID
                });
                uniqueOverrideValues.addObject(symbolID);
            }
        })
    });

    if (changeableOverridePoints.count() == 0) {
        document.showMessage("Not any symbol override.");
        return;
    }


    log(changeableOverridePoints)
    log(uniqueOverrideValues)

    // Dialog
    var dialog = UI.cosDialog(
        "Replace Symbol Override",
        "Replace symbol override ...."
    );

    var symbolOverridesButton = NSPopUpButton.alloc().initWithFrame(NSMakeRect(0, 0, 300, 30));
    uniqueOverrideValues.allObjects().forEach(function(symbolID) {
        var menuItem = NSMenuItem.alloc().init();
        var symbolMaster = documentData.symbolWithID(symbolID);
        var title = symbolMaster.name();
        if (symbolMaster.isForeign()) {
            title = symbolMaster.foreignObject().sourceLibraryName() + " ▶︎ " + symbolMaster.name();
        }
        menuItem.setTitle(title);
        var menuImage = symbolMasterThumb(symbolMaster);
        menuItem.setImage(menuImage);
        symbolOverridesButton.menu().addItem(menuItem);
    });







    dialog.addAccessoryView(symbolOverridesButton);
    dialog.runModal();


}

function symbolMasterThumb(symbolMaster) {
    var size = 20;
    var image = NSImage.alloc().initWithSize(CGSizeMake(size, size));
    var symbolPreviewImage = MSSymbolPreviewGenerator.imageForSymbolAncestry_withSize_colorSpace_trimmed(
        symbolMaster.ancestry(), CGSizeMake(size, size), NSColorSpace.sRGBColorSpace(), true
    );
    image.lockFocus();
    symbolPreviewImage.drawAtPoint_fromRect_operation_fraction(
        CGPointMake((size - symbolPreviewImage.size().width) / 2, (size - symbolPreviewImage.size().height) / 2),
        CGRectMake(0, 0, symbolPreviewImage.size().width, symbolPreviewImage.size().height),
        NSCompositeCopy,
        1
    );
    image.unlockFocus();
    return image;
}

function getValueSymbolID(context, instance, point) {
    var documentData = context.document.documentData();
    var valueSymbolID = documentData.layerWithID(point.layerID()).symbolID();
    instance.overrideValues().forEach(function(value) {
        if (value.overrideName() == point.name()) {
            valueSymbolID = value.value();
        }
    });
    return valueSymbolID;
}

function isUserChangeableOverride(context, point) {
    var documentData = context.document.documentData();
    if (documentData.layerWithID(point.layerID()).isLocked()) {
        return false;
    } else {
        if (point.parent()) {
            isUserChangeableOverride(context, point.parent());
        }
    }
    return true;
}

function symbolInstancesInSelection(context) {
    var allInstances = NSMutableArray.alloc().init();
    var predicate = NSPredicate.predicateWithFormat("className == %@", "MSSymbolInstance");
    var loopSelection = context.selection.objectEnumerator();
    var layer;
    while (layer = loopSelection.nextObject()) {
        var instances = layer.children().filteredArrayUsingPredicate(predicate);
        allInstances.addObjectsFromArray(instances);
    }
    return allInstances;
}

function symbolInstancesInDocument(context) {
    var allInstances = NSMutableArray.alloc().init();
    var predicate = NSPredicate.predicateWithFormat("className == %@", "MSSymbolInstance");
    var loopPages = context.document.pages().objectEnumerator();
    var page;
    while (page = loopPages.nextObject()) {
        var instancesInPage = page.children().filteredArrayUsingPredicate(predicate);
        allInstances.addObjectsFromArray(instancesInPage);
    }
    return allInstances;
}
