@import "../Libraries/Google_Analytics.cocoascript";

var onRun = function(context) {

    var document = context.document;
    var documentData = document.documentData();
    var unusedSymbols = getAllUnusedSymbols(context);

    if (unusedSymbols.count() == 0) {
        document.showMessage("👍 Have not any unused symbol in current document.");
        return;
    }

    // Dialog
    var viewWidth = 400,
        viewHeight = 400,
        rowHeight = 50;

    var dialog = NSAlert.alloc().init();
    dialog.setMessageText("Remove Unused Symbols");
    dialog.setInformativeText("Uncheck the symbol to keep it.");
    dialog.addButtonWithTitle("OK");
    dialog.addButtonWithTitle("Cancel");

    var accessoryView = NSView.alloc().init();
    accessoryView.setFlipped(true);
    accessoryView.setFrame(NSMakeRect(0, 0, viewWidth, viewHeight));

    var scrollView = NSScrollView.alloc().initWithFrame(NSMakeRect(0, 0, viewWidth, viewHeight));
    scrollView.setHasVerticalScroller(true);
    scrollView.setBorderType(NSBezelBorder);
    accessoryView.addSubview(scrollView);

    var contentView = NSView.alloc().initWithFrame(NSMakeRect(0, 0, viewWidth, unusedSymbols.count() * rowHeight + 10));
    contentView.setFlipped(true);
    scrollView.setDocumentView(contentView);

    var loopUnusedSymbols = unusedSymbols.objectEnumerator();
    var unusedSymbol;
    var i = 0;
    while (unusedSymbol = loopUnusedSymbols.nextObject()) {

        // List
        var itemView = NSView.alloc().initWithFrame(NSMakeRect(0, rowHeight * i, viewWidth, rowHeight));
        itemView.setFlipped(true);

        // Checkbox
        var checkbox = NSButton.alloc().initWithFrame(NSMakeRect(10, (rowHeight - 30) / 2, viewWidth - 50, 30));
        checkbox.setButtonType(NSSwitchButton);
        var title = "             " + unusedSymbol.name();
        checkbox.setTitle(title);
        checkbox.setState(NSOnState);
        itemView.addSubview(checkbox);

        // Preview image
        var imageSize = rowHeight - 20;
        var imageView = NSImageView.alloc().initWithFrame(NSMakeRect(35, 10, imageSize, imageSize));
        var layerAncestry = MSImmutableLayerAncestry.alloc().initWithMSLayer(unusedSymbol);
        var symbolPreviewImage = MSSymbolPreviewGenerator.imageForSymbolAncestry_withSize_colorSpace_trimmed(
            layerAncestry, CGSizeMake(imageSize, imageSize), NSColorSpace.sRGBColorSpace(), true
        );
        imageView.setImage(symbolPreviewImage);
        itemView.addSubview(imageView);

        // Library symbol icon
        if (unusedSymbol.isForeign()) {
            var iconFile = NSURL.fileURLWithPath("/Applications/Sketch.app/Contents/Resources/layerlist_foreign_symbol.tiff").path();
            var icon = NSImage.alloc().initWithContentsOfFile(iconFile);
            var iconView = NSImageView.alloc().initWithFrame(NSMakeRect(viewWidth - 40, (rowHeight - 48) / 2, 48, 48));
            iconView.setImage(icon);
            itemView.addSubview(iconView);
        }

        // Divider line
        var divider = NSView.alloc().initWithFrame(NSMakeRect(0, rowHeight - 1, viewWidth, 1));
        divider.setWantsLayer(true);
        divider.layer().setBackgroundColor(CGColorCreateGenericRGB(0, 0, 0, 0.1));
        itemView.addSubview(divider);

        contentView.addSubview(itemView);

        i ++;
    }

    dialog.setAccessoryView(accessoryView);

    var responseCode = dialog.runModal();
    if (responseCode == 1000) {

        var count = 0;
        var unusedSymbolViews = contentView.subviews().objectEnumerator();
        var unusedSymbolView;
        var unusedSymbolIndex = 0;
        while (unusedSymbolView = unusedSymbolViews.nextObject()) {
            var state = unusedSymbolView.subviews().firstObject().state();
            if (state) {
                var unusedSymbolsWillRemoved = unusedSymbols.objectAtIndex(unusedSymbolIndex);
                if (unusedSymbolsWillRemoved.isForeign()) {
                    documentData.removeForeignSymbol(unusedSymbolsWillRemoved.foreignSymbol());
                } else {
                    unusedSymbolsWillRemoved.removeFromParent();
                }
                count ++;
            }
            unusedSymbolIndex ++;
        }

        if (count > 1) {
            document.showMessage("🎉 " + count + " unused symbols have been removed.");
        } else if (count == 1) {
            document.showMessage("😊 1 unused symbol have been removed.");
        }

    }

    ga(context, "UA-99098773-3", "Symbol", context.command.identifier());

};

function getAllUnusedSymbols(context) {

    var document = context.document;
    var documentData = document.documentData();
    var allSymbols = documentData.allSymbols();
    var result = allSymbols.mutableCopy();

    var loopPages = document.pages().objectEnumerator();
    var page;
    while (page = loopPages.nextObject()) {
        var symbolInstancesInPage = page.allSymbolInstancesInChildren().allObjects();
        var loopSymbolInstancesInPage = symbolInstancesInPage.objectEnumerator();
        var symbolInstance;
        while (symbolInstance = loopSymbolInstancesInPage.nextObject()) {
            result.removeObject(symbolInstance.symbolMaster());
            var overrideValues = symbolInstance.overrideValues();
            var loopOverrideValues = overrideValues.objectEnumerator();
            var overrideValue;
            while (overrideValue = loopOverrideValues.nextObject()) {
                if (overrideValue.overrideName().containsString("_symbolID")) {
                    result.removeObject(documentData.symbolWithID(overrideValue.value()));
                }
            }
        }
    }

    var sortByName = NSSortDescriptor.sortDescriptorWithKey_ascending("name", true);
    result.sortUsingDescriptors(NSArray.arrayWithObject(sortByName));

    var sortByType = NSSortDescriptor.sortDescriptorWithKey_ascending("isForeign", false);
    result.sortUsingDescriptors(NSArray.arrayWithObject(sortByType));

    return result;

}
