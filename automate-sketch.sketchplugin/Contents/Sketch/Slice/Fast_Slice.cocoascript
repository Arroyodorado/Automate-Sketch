@import "../Libraries/Preferences.cocoascript";
@import "../Libraries/Google_Analytics.cocoascript";
@import "../Libraries/UI_Controls.cocoascript";

var runFastSlice = function(context) {

    ga(context, "Slice");

    var document = context.document;
    var exportPresets = MSExportPreset.allExportPresets();

    // Checking if need to run setting first.
    var runSettingFirst = false;
    var fastSlicePresetIndex = getPreferences(context, "fastSlicePresetIndex");
    var fastSlicePresetName = getPreferences(context, "fastSlicePresetName");
    var fastSliceNameFormat = getPreferences(context, "fastSliceNameFormat");
    if (!fastSlicePresetIndex || !fastSlicePresetIndex || !fastSliceNameFormat) {
        runSettingFirst = true;
    }
    else {
        var defaultPreset = exportPresets.objectAtIndex(fastSlicePresetIndex);
        if (defaultPreset) {
            if (defaultPreset.name() != fastSlicePresetName) {
                runSettingFirst = true;
            }
        }
        else {
            runSettingFirst = true;
        }
    }
    if (runSettingFirst) {
        document.showMessage("You may first time run Fast Slice, so config the Fast Slice Setting first.");
        var setting = fastSliceSetting(context);
        if (setting != 1000) {
            document.showMessage("You must confirm the Fast Slice Setting.");
            return;
        }
        if (setting == 1000) {
            fastSlicePresetIndex = getPreferences(context, "fastSlicePresetIndex");
            fastSlicePresetName = getPreferences(context, "fastSlicePresetName");
            fastSliceNameFormat = getPreferences(context, "fastSliceNameFormat");
        }
    }

    // Checking selection
    var selection = context.selection;
    if (selection.count() == 0) {
        document.showMessage("Please select at least one layer.");
        return;
    }

    // Add Slice
    var loopSelection = selection.objectEnumerator();
    var layer;
    while (layer = loopSelection.nextObject()) {

        var slice = MSSliceLayer.sliceLayerFromLayer(layer);
        var msRect = MSRect.rectWithUnionOfRects([
            MSRect.alloc().initWithRect(slice.absoluteRect().rect()),
            MSRect.alloc().initWithRect(layer.absoluteRect().rect())
        ]);
        slice.absoluteRect().setRect(msRect.rect());
        slice.makeOriginIntegral();
        slice.makeOriginIntegral();

        if (
            layer.class() == "MSLayerGroup" ||
            layer.class() == "MSArtboardGroup" ||
            layer.class() == "MSSymbolMaster"
        ) {
            slice.moveToLayer_beforeLayer(layer, layer.firstLayer());
            if (layer.class() == "MSLayerGroup") {
                slice.exportOptions().setLayerOptions(2);
            }
        } else {
            slice.moveToLayer_beforeLayer(layer.parentGroup(), layer);
        }

        if (slice.parentGroup().class() == "MSLayerGroup") {
            slice.exportOptions().setLayerOptions(2);
        }

        var exportFormats = exportPresets.objectAtIndex(fastSlicePresetIndex).exportFormats();
        slice.exportOptions().setExportFormats(exportFormats);

        // Slice layer name
        var layerName = layer.name();
        // group/base_name
        if (fastSliceNameFormat == 0) {
            layerName = formatLayerName(layerName, "_", "/");
        }
        // group/base-name
        if (fastSliceNameFormat == 1) {
            layerName = formatLayerName(layerName, "-", "/");
        }
        // group_base_name
        if (fastSliceNameFormat == 2) {
            layerName = formatLayerName(layerName, "_", "_");
        }
        // group-base-name
        if (fastSliceNameFormat == 3) {
            layerName = formatLayerName(layerName, "-", "-");
        }
        // base_name
        if (fastSliceNameFormat == 4) {
            layerName = cropLayerName(layerName, "_");
        }
        // base-name
        if (fastSliceNameFormat == 5) {
            layerName = cropLayerName(layerName, "-");
        }
        slice.setName(layerName);

    }

    document.reloadInspector();

};

var runFastSliceSetting = function(context) {
    fastSliceSetting(context);
    ga(context, "Slice");
};

function fastSliceSetting(context) {

    // Dialog
    var dialog = UI.cosDialog(
        "Fast Slice Setting",
        "Fast slice add a slice with an export preset and name to url-friendly format. " +
        "Slice name will change Latin char to ASCII char, remove not ASCII char, " +
        "special sign and digits at the beginning of name."
    );

    var presetLabel = UI.textLabel("Choose Export Option Preset for Slice Layer");
    dialog.addAccessoryView(presetLabel);

    var exportPresets = MSExportPreset.allExportPresets().slice().map(function(item) {
        return item.name()
    });
    var preset = UI.popupButton(exportPresets, 300);
    dialog.addAccessoryView(preset);

    var nameLabel = UI.textLabel("Choose Slice Layer Name Format");
    dialog.addAccessoryView(nameLabel);

    var nameFormats = [
        "group/base_name",
        "group/base-name",
        "group_base_name",
        "group-base-name",
        "base_name",
        "base-name"
    ];
    var nameFormat = UI.popupButton(nameFormats, 300);
    dialog.addAccessoryView(nameFormat);

    var fastSlicePresetIndex = getPreferences(context, "fastSlicePresetIndex");
    var fastSlicePresetName = getPreferences(context, "fastSlicePresetName");
    var fastSliceNameFormat = getPreferences(context, "fastSliceNameFormat");
    if (fastSlicePresetIndex && fastSlicePresetName) {
        if (exportPresets[fastSlicePresetIndex] == fastSlicePresetName) {
            preset.selectItemAtIndex(fastSlicePresetIndex);
        }
    }
    if (fastSliceNameFormat) {
        nameFormat.selectItemAtIndex(fastSliceNameFormat);
    }

    var responseCode = dialog.runModal();
    if (responseCode == 1000) {
        // Save preferences
        setPreferences(context, "fastSlicePresetIndex", preset.indexOfSelectedItem());
        setPreferences(context, "fastSlicePresetName", preset.titleOfSelectedItem());
        setPreferences(context, "fastSliceNameFormat", nameFormat.indexOfSelectedItem());
    }

    return responseCode;
}

function cleanNameArray(name) {
    var nameArray = [];
    String(name).split(/\s*\/\s*/).forEach(function(part) {
        // Latin to ascii
        var latinToAsciiMapping = {
            "ae": "ä|æ|ǽ",
            "oe": "ö|œ",
            "ue": "ü",
            "Ae": "Ä",
            "Ue": "Ü",
            "Oe": "Ö",
            "A": "À|Á|Â|Ã|Ä|Å|Ǻ|Ā|Ă|Ą|Ǎ",
            "a": "à|á|â|ã|å|ǻ|ā|ă|ą|ǎ|ª",
            "C": "Ç|Ć|Ĉ|Ċ|Č",
            "c": "ç|ć|ĉ|ċ|č",
            "D": "Ð|Ď|Đ",
            "d": "ð|ď|đ",
            "E": "È|É|Ê|Ë|Ē|Ĕ|Ė|Ę|Ě",
            "e": "è|é|ê|ë|ē|ĕ|ė|ę|ě",
            "G": "Ĝ|Ğ|Ġ|Ģ",
            "g": "ĝ|ğ|ġ|ģ",
            "H": "Ĥ|Ħ",
            "h": "ĥ|ħ",
            "I": "Ì|Í|Î|Ï|Ĩ|Ī|Ĭ|Ǐ|Į|İ",
            "i": "ì|í|î|ï|ĩ|ī|ĭ|ǐ|į|ı",
            "J": "Ĵ",
            "j": "ĵ",
            "K": "Ķ",
            "k": "ķ",
            "L": "Ĺ|Ļ|Ľ|Ŀ|Ł",
            "l": "ĺ|ļ|ľ|ŀ|ł",
            "N": "Ñ|Ń|Ņ|Ň",
            "n": "ñ|ń|ņ|ň|ŉ",
            "O": "Ò|Ó|Ô|Õ|Ō|Ŏ|Ǒ|Ő|Ơ|Ø|Ǿ",
            "o": "ò|ó|ô|õ|ō|ŏ|ǒ|ő|ơ|ø|ǿ|º",
            "R": "Ŕ|Ŗ|Ř",
            "r": "ŕ|ŗ|ř",
            "S": "Ś|Ŝ|Ş|Š",
            "s": "ś|ŝ|ş|š|ſ",
            "T": "Ţ|Ť|Ŧ",
            "t": "ţ|ť|ŧ",
            "U": "Ù|Ú|Û|Ũ|Ū|Ŭ|Ů|Ű|Ų|Ư|Ǔ|Ǖ|Ǘ|Ǚ|Ǜ",
            "u": "ù|ú|û|ũ|ū|ŭ|ů|ű|ų|ư|ǔ|ǖ|ǘ|ǚ|ǜ",
            "Y": "Ý|Ÿ|Ŷ",
            "y": "ý|ÿ|ŷ",
            "W": "Ŵ",
            "w": "ŵ",
            "Z": "Ź|Ż|Ž",
            "z": "ź|ż|ž",
            "AE": "Æ|Ǽ",
            "ss": "ß",
            "IJ": "Ĳ",
            "ij": "ĳ",
            "OE": "Œ",
            "f": "ƒ",
        };
        for (var i in latinToAsciiMapping) {
            var regexp = new RegExp(latinToAsciiMapping[i], "g");
            part = part.replace(regexp, i);
        }
        // Remove no ascii character
        part = part.replace(/[^\u0020-\u007E]/g, "");
        // Remove unsupport character
        part = part.replace(/[\u0021-\u002B\u003A-\u0040\u005B-\u005E\u0060\u007B-\u007E]/g, "");
        // Remove digits at the beginning of name
        part = part.replace(/^\d+/, "");
        // Unix hidden file
        part = part.replace(/^\./, "");
        // , - . _ to space
        part = part.replace(/[\u002C-\u002E\u005F]/g, " ");
        part = part.toLowerCase();
        part = part.trim();
        if (part != "") {
            nameArray.push(part);
        }
    });
    return nameArray;
}

function formatLayerName(name, space, join) {
    var newNameArray = cleanNameArray(name).map(function(part) {
        return part.replace(/\s+/g, space);
    });
    return newNameArray.join(join);
}

function cropLayerName(name, space) {
    var newNameArray = cleanNameArray(name).map(function(part) {
        return part.replace(/\s+/g, space);
    });
    return newNameArray[newNameArray.length - 1];
}
