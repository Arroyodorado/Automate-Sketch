@import "../Libraries/Google_Analytics.cocoascript";
@import "../Libraries/UI_Controls.cocoascript";

var onRun = function(context) {

    // ga(context, "Utilities");

    var document = context.document;
    var selection = context.selection;
    var layer = selection.firstObject();
    if (!layer) {
        document.showMessage("Please select a bitmap layer.");
        return;
    } else {
        if (layer.class() != "MSBitmapLayer") {
            document.showMessage("Please select a bitmap layer.");
            return;
        }
    }

    var image = layer.NSImage();
    var imageWidth = image.size().width;
    var imageHeight = image.size().height;
    var bitmapRep = image.representations().firstObject();
    // var bitmapWidth = bitmapRep.pixelsWide();
    // var bitmapHeight = bitmapRep.pixelsHigh();
    var layerWidth = layer.frame().width();
    var layerHeight = layer.frame().height();

    // for (var y = 0; y < layerHeight; y++) {
    //     for (var x = 0; x < bitmapWidth; x++) {
    //         var color = bitmapRep.colorAtX_y(x, y);
    //         log(`(${x},${y}) - ${color}`)
    //     }
    // }

    // Dialog
    var dialog = UI.cosDialog(
        "Nine-Slice from Bitmap Layer",
        "xxx."
    );

    var thumbWidth = 200;
    var thumbHeight = Math.round(200 * imageHeight / imageWidth);
    if (imageHeight > imageWidth) {
        thumbWidth = Math.round(200 * imageWidth / imageHeight);
        thumbHeight = 200;
    }
    var scale = thumbWidth / imageWidth;

    // Resize NSImage
    var originalImage = image.copy();
    var thumbSize = CGSizeMake(thumbWidth, thumbHeight);
    originalImage.setScalesWhenResized(true);
    var resizedImage = NSImage.alloc().initWithSize(thumbSize);
    resizedImage.lockFocus();
    originalImage.setSize(thumbSize);
    NSGraphicsContext.currentContext().setImageInterpolation(NSImageInterpolationNone);
    originalImage.drawAtPoint_fromRect_operation_fraction(NSZeroPoint, CGRectMake(0, 0, thumbSize.width, thumbSize.height), NSCompositeCopy, 1);
    resizedImage.unlockFocus();

    // Thumb view
    var imageWrapper = NSView.alloc().initWithFrame(NSMakeRect(0, 0, thumbWidth, thumbHeight));
    imageWrapper.setFlipped(true);
    var imageView = NSImageView.alloc().initWithFrame(NSMakeRect(0, 0, thumbWidth, thumbHeight));
    var backgroundImage = NSImage.alloc().initWithContentsOfFile("/Applications/Sketch.app/Contents/Resources/touchbar_color_alpha@2x.png");
    imageView.setWantsLayer(true);
    imageView.setBackgroundColor(NSColor.colorWithPatternImage(backgroundImage));
    imageView.setImage(resizedImage);

    // Add red lines
    var lineLeft = lineView(Math.round(thumbWidth / 3), 0, 1, thumbHeight);
    var lineRight = lineView(Math.round(thumbWidth / 3 * 2), 0, 1, thumbHeight);
    var lineTop = lineView(0, Math.round(thumbHeight / 3), thumbWidth, 1);
    var lineBottom = lineView(0, Math.round(thumbHeight / 3 * 2), thumbWidth, 1);
    imageWrapper.addSubview(imageView);
    imageWrapper.addSubview(lineLeft);
    imageWrapper.addSubview(lineRight);
    imageWrapper.addSubview(lineTop);
    imageWrapper.addSubview(lineBottom);
    dialog.addAccessoryView(imageWrapper);

    // Slidebars
    var slideBarLeft = sliderBarView("Left: " + Math.round(imageWidth / 3), imageWidth, Math.round(imageWidth / 3));
    var slideBarRight = sliderBarView("Right: " + Math.round(imageWidth / 3 * 2), imageWidth, Math.round(imageWidth / 3 * 2));
    var slideBarTop = sliderBarView("Top: " + Math.round(imageHeight / 3), imageHeight, Math.round(imageHeight / 3));
    var slideBarBottom = sliderBarView("Bottom: " + Math.round(imageHeight / 3 * 2), imageHeight, Math.round(imageHeight / 3 * 2));
    dialog.addAccessoryView(slideBarLeft.container);
    dialog.addAccessoryView(slideBarRight.container);
    dialog.addAccessoryView(slideBarTop.container);
    dialog.addAccessoryView(slideBarBottom.container);

    slideBarLeft.slider.setCOSJSTargetFunction(function(sender) {
        restrictValue(sender, 0, slideBarRight.slider.intValue());
        slideBarLeft.label.setStringValue(`Left: ${sender.intValue()}`);
        lineLeft.setFrameOrigin(CGPointMake(Math.round(sender.intValue() * scale), 0));
    });
    slideBarRight.slider.setCOSJSTargetFunction(function(sender) {
        restrictValue(sender, slideBarLeft.slider.intValue(), imageWidth);
        slideBarRight.label.setStringValue(`Right: ${sender.intValue()}`);
        lineRight.setFrameOrigin(CGPointMake(Math.round(sender.intValue() * scale), 0));
    });
    slideBarTop.slider.setCOSJSTargetFunction(function(sender) {
        restrictValue(sender, 0, slideBarBottom.slider.intValue());
        slideBarTop.label.setStringValue(`Top: ${sender.intValue()}`);
        lineTop.setFrameOrigin(CGPointMake(0, Math.round(sender.intValue() * scale)));
    });
    slideBarBottom.slider.setCOSJSTargetFunction(function(sender) {
        restrictValue(sender, slideBarTop.slider.intValue(), imageHeight);
        slideBarBottom.label.setStringValue(`Bottom: ${sender.intValue()}`);
        lineBottom.setFrameOrigin(CGPointMake(0, Math.round(sender.intValue() * scale)));
    });

    var responseCode = dialog.runModal();
    if (responseCode == 1000) {


        log(`left:${slideBarLeft.slider.intValue()}-right:${slideBarRight.slider.intValue()}-top:${slideBarTop.slider.intValue()}-bottom:${slideBarBottom.slider.intValue()}`)
    }

};

function lineView(x, y, w, h) {
    var view = NSView.alloc().initWithFrame(NSMakeRect(x, y, w, h));
    view.setWantsLayer(true);
    view.layer().setBackgroundColor(CGColorCreateGenericRGB(1, 0, 0, 0.8));
    return view;
}

function sliderBarView(lebal, maxValue, initValue) {
    var view = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 20));

    var sliderView = NSSlider.alloc().initWithFrame(NSMakeRect(0, 0, 200, 20));
    sliderView.setMaxValue(maxValue);
    sliderView.setMinValue(0);
    sliderView.setIntValue(initValue);

    var textView = NSTextField.alloc().initWithFrame(NSMakeRect(210, 0, 90, 20));
    textView.setStringValue(lebal);
    textView.setTextColor(NSColor.blackColor());
    textView.setBezeled(false);
    textView.setDrawsBackground(false);
    textView.setEditable(false);
    textView.setSelectable(false);

    view.addSubview(textView);
    view.addSubview(sliderView);

    return { container: view, label: textView, slider: sliderView };
}

function restrictValue(sliderView, minValue, maxValue) {
    var value = sliderView.intValue();
    if (value <= minValue) {
        value = minValue + 1;
    }
    if (value >= maxValue) {
        value = maxValue - 1;
    }
    sliderView.setIntValue(value);
}
